barCols.diff <- sapply(salDiffD,
function(x) {
if(x < 0) {
return("black")
} else {
return("purple")
}
}
)
curr <- 30.93461
NorthData <- read.csv("NorthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("NorthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
library(readr)
dataset <- read_csv(NULL)
View(dataset)
#Reading in North values
NorthData <- read.csv("NorthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
#Reading in North values
NorthData <- read.csv("NorthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
mean(NorthData$X110m.Sal..PSU.)
sd(NorthData$X110m.Sal..PSU.)
curr <- 30.93461
salDiffD <- NorthData$X110m.Sal..PSU. - curr
barCols.diff <- sapply(salDiffD,
function(x) {
if(x < 0) {
return("black")
} else {
return("purple")
}
}
)
plt <- barplot(salDiffD, border=NA, space=0, las=1, ylab="Variation [PSU]", ylim=c(-1,1), col=barCols.diff, main="North Station Change Relative to Mean Bottom Salinity")
dates <- c(NorthData$Date)
years <- substring(dates, 0, 4)
axis(1, at=plt, labels=years)
#Reading in South values
SouthData <- read.csv("SouthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
mean(SouthData$X80m.Sal..PSU., na.rm=TRUE)
sd(SouthData$X80m.Sal..PSU., na.rm=TRUE)
curr <- 32.44322
sSalDiffD <- SouthData$X80m.Sal..PSU - curr
sBarCols.diff <- sapply(sSalDiffD,
function(x) {
if(x < 0) {
return("black")
} else {
return("purple")
}
}
)
plt <- barplot(sSalDiffD, border=NA, space=0, las=1, ylab="Percent Change", ylim=c(-2,2), col=sBarCols.diff, main="South Station Change Relative to Mean Bottom Salinity")
datesS <- c(SouthData$Date)
yearsS <- substring(datesS, 0, 4)
axis(1, at=plt, labels=yearsS)
NorthData <- read.csv("NorthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
mean(NorthData$X110m.Sal..PSU.)
sd(NorthData$X110m.Sal..PSU.)
curr <- 30.93461
salDiffD <- NorthData$X110m.Sal..PSU. - curr
barCols.diff <- sapply(salDiffD,
function(x) {
if(x < 0) {
return("black")
} else {
return("purple")
}
}
)
plt <- barplot(salDiffD, border=NA, space=0, las=1, ylab="Variation [PSU]", ylim=c(-1,1), col=barCols.diff, main="North Station Change Relative to Mean Bottom Salinity")
dates <- c(NorthData$Date)
years <- substring(dates, 0, 4)
axis(1, at=plt, labels=years)
curr <- 30.93461
salDiffD <- NorthData$X110m.Sal..PSU. - curr
barCols.diff <- sapply(salDiffD,
function(x) {
if(x < 0) {
return("black")
} else {
return("purple")
}
}
)
salDiffD <- NorthData$X110m.Sal..PSU. - curr
NorthData <- read.csv("NorthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("NorthSalDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
library(readr)
NorthDeep <- read_csv("R/NorthDeep.csv")
View(NorthDeep)
library(readr)
SouthDeep <- read_csv("R/SouthDeep.csv")
View(SouthDeep)
NorthData <- read.csv("NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
mean(NorthData$X110m.Tem)
sd(NorthData$X110m.Tem)
curr <- 9.731837
tempDiffD <- NorthData$X110m.Tem - curr
barCols.diff <- sapply(tempDiffD,
function(x) {
if(x < 0) {
return("blue")
} else {
return("red")
}
}
)
plt <- barplot(tempDiffD, border=NA, space=0, las=1, ylab="Degrees C", ylim=c(-1.5,1.5), col=barCols.diff, main="North station percent change relative to mean bottom temperature")
dates <- c(NorthData$Date)
years <- substring(dates, 0, 4)
axis(1, at=plt, labels=years)
NorthData <- read.csv("NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("NorthDeep", header = TRUE, colClasses=c("Date",NA))
tempDiffD <- NorthDeep$X110m.Tem - curr
#Reading in North values
NorthData <- read.csv("NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("./NorthDeep.csv/", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("C:\Desktop\NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("C:/Desktop/NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
NorthData <- read.csv("C:/Users/wwtar/NorthDeep.csv", header = TRUE, colClasses=c("Date",NA))
mean(NorthData$X110m.Tem)
sd(NorthData$X110m.Tem)
curr <- 9.731837
tempDiffD <- NorthData$X110m.Tem - curr
barCols.diff <- sapply(tempDiffD,
function(x) {
if(x < 0) {
return("blue")
} else {
return("red")
}
}
)
plt <- barplot(tempDiffD, border=NA, space=0, las=1, ylab="Degrees C", ylim=c(-1.5,1.5), col=barCols.diff, main="North station percent change relative to mean bottom temperature")
dates <- c(NorthData$Date)
years <- substring(dates, 0, 4)
axis(1, at=plt, labels=years)
curr <- 9.731837
tempDiffD <- NorthData$X110m.Tem - curr
barCols.diff <- sapply(tempDiffD,
function(x) {
if(x < 0) {
return("blue")
} else {
return("red")
}
}
)
plt <- barplot(tempDiffD, border=NA, space=0, las=1, ylab="Degrees C", ylim=c(-1.5,1.5), col=barCols.diff, main="North station percent change relative to mean bottom temperature")
print x
print(x)
x <- "Hello World"
print(x)
x <- "Hello World"
print(x)
x <- "Hello World"
x <- "Hello World"
x
#  Bayes Theorem Practice
PrA <- c(0.75,0.25)
PrBA <- c(6/9, 5/7)
BayesTheorem(PrA, PrBA)
install.packages('install.packages('fortunes')')
install.packages('LaplacesDemon')
install.packages('ggplot2')
install.packages('ggplot2')
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages('ggplot2')
Sys.getlocale()
install.packages("LaplacesDemon")
setwd("~/Code/R/RPractice")
.libPaths()
install.packages('ggplot2')
help(install.packages)
help(install.packages)
install.packages('ggplot2', C:\Users\wwtar\OneDrive\Documents\R\win-library\3.5)
install.packages('ggplot2', 'C:\Users\wwtar\OneDrive\Documents\R\win-library\3.5')
install.packages('ggplot2', 'C:/Users/wwtar/OneDrive/Documents/R/win-library/3.5')
#  Bayes Theorem Practice
PrA <- c(0.75,0.25)
install.packages('LaplacesDemon', 'C:/Users/wwtar/OneDrive/Documents/R/win-library/3.5')
#  Bayes Theorem Practice
PrA <- c(0.75,0.25)
PrBA <- c(6/9, 5/7)
BayesTheorem(PrA, PrBA)
library(LaplacesDemon)
#  Bayes Theorem Practice
PrA <- c(0.75,0.25)
PrBA <- c(6/9, 5/7)
BayesTheorem(PrA, PrBA)
# to get upper and lower limits of 95% confidence interval
qnorm(0.025)
qnorm(1-0.025)
# confidence limit in single value for 95% confidence interval
cl<-0.95
qnorm((1+cl)/2)
# binomial formula
binom.test(x=39, n=215, p=0.15)
# Two basic data structures - vectors and matrices
##################################################
# Vectors
x <- 1:5
y <- c(1,1,2,3,5)
# Indexing
x[2]
x[-3]
y[c(3,4)]
y[-c(3,4)]
# Matrices
A <- matrix(data = 1:25, nrow = 5, ncol = 5)
# Indexing [row, column]
A[2,3]
A[c(2,5),-3]
# Vectorization - many operations are applied elementwise
x * 3
x < 4 # booleans for if conditions are true or false
x * y #
# Can index vectors and matrices with vectors of booleans
x[c(TRUE,TRUE,TRUE,FALSE,FALSE)]
A[x > 2, y == 1] #
# Two basic data structures - vectors and matrices
##################################################
# Vectors
x <- 1:5
y <- c(1,1,2,3,5)
# Indexing
x[2]
# Built-in help system
######################
help("==")
help("TRUE")
help("sample")
# Built-in help system
######################
help("==")
# Simulating all games at once
##############################
n <- 10^5
cardoor <- sample(3,n,replace=TRUE)
#Number of cars won with 'keep'
n.cars <- sum(cardoor==1)
n.cars/n
mean(cardoor==1)
# Simulating one game at a time
###############################
# Function that runs a single monty hall game
# arguments: specify which door to choose and whether or not to keep/switch
monty <- function(chosen, keep=TRUE) {
doors <- 1:3
# check if chosen door is valid
if(!(chosen %in% doors)) stop("Chosen door invalid.")
# randomly pick where the car is
cardoor <- sample(doors,1)
#pick Monty's door (can't be the player's door or the car door)
if(chosen != cardoor) {
montydoor <- doors[-c(chosen, cardoor)]
} else {
montydoor <- sample(doors[-chosen],1)
}
if(!keep) {
chosen <- doors[-c(chosen, montydoor)]
}
# 1 if win, 0 if lose
chosen == cardoor
}
# check if chosen door is valid
if(!(chosen %in% doors)) stop("Chosen door invalid.") # stop terminates function and prints string
# randomly pick where the car is
cardoor <- sample(doors,1)
#pick Monty's door (can't be the player's door or the car door)
if(chosen != cardoor) {
montydoor <- doors[-c(chosen, cardoor)]
} else {
montydoor <- sample(doors[-chosen],1)
}
if(!keep) {
chosen <- doors[-c(chosen, montydoor)]
}
# 1 if win, 0 if lose
chosen == cardoor
# Simulating one game at a time
###############################
# Function that runs a single monty hall game
# arguments: specify which door to choose and whether or not to keep/switch
monty <- function(chosen, keep=TRUE) { # keep has default value of TRUE
doors <- 1:3
# check if chosen door is valid
if(!(chosen %in% doors)) stop("Chosen door invalid.") # stop terminates function and prints string
# randomly pick where the car is
cardoor <- sample(doors,1)
#pick Monty's door (can't be the player's door or the car door)
if(chosen != cardoor) {
montydoor <- doors[-c(chosen, cardoor)]
} else {
montydoor <- sample(doors[-chosen],1)
}
if(!keep) {
chosen <- doors[-c(chosen, montydoor)]
}
# 1 if win, 0 if lose
chosen == cardoor
}
# Run game n times and record results
record <- rep(0,n)
for(i in 1:n) {
record[i] = monty(sample(1:3,1))
}
mean(record)
mean(record)
x
x
source('~/Autumn Quarter 2018/DATA 556/0926lab.R')
par(cex = 1.5, mar = c(5, 5, 4, 2))
birthday <- function(k) {
logdenom <- k * log(365) + lfactorial(365 - k) # log denominator
lognumer <- lfactorial(365) # log numerator
##P(at least two have the same bday) = 1 - P(nobody has the same bday)
pr <- 1 - exp(lognumer - logdenom) # transform back
return(pr)
}
k <- 1:50
bday <- birthday(k) # call the function
names(bday) <- k # add labels
plot(k, bday, xlab="Number of people", xlim=c(0, 50), ylim = c(0, 1), ylab="Probability that at least two\n people have the same birthday")
abline(h = 0.5) # horizontal 0.5 line
bday[20:25]
k <- 23 # number of people
sims <- 100 # number of simulations
event <- 0 # counter
for (i in 1:sims) {
days <- sample(1:365, k, replace=TRUE)
days.unique <- unique(days) # unique birthdays
## if there are duplicates, the number of unique birthdays
## will be less than the number of birthdays which is k
if(length(days.unique) < k) {
event <- event + 1
}
}
## fraction of trials where at least 2 bdays are the same
answer <- event / sims
answer
## fraction of trials where at least 2 bdays are the same
answer <- event / sims
answer
k <- 23 # number of people
sims <- 100 # number of simulations
event <- 0 # counter
for (i in 1:sims) {
days <- sample(1:365, k, replace=TRUE)
days.unique <- unique(days) # unique birthdays
## if there are duplicates, the number of unique birthdays
## will be less than the number of birthdays which is k
if(length(days.unique) < k) {
event <- event + 1
}
}
## fraction of trials where at least 2 bdays are the same
answer <- event / sims
answer
k <- 23 # number of people
sims <- 100 # number of simulations
event <- 0 # counter
for (i in 1:sims) {
days <- sample(1:365, k, replace=TRUE)
days.unique <- unique(days) # unique birthdays
## if there are duplicates, the number of unique birthdays
## will be less than the number of birthdays which is k
if(length(days.unique) < k) {
event <- event + 1
}
}
## fraction of trials where at least 2 bdays are the same
answer <- event / sims
answer
sims <- 1000
doors <- c("goat", "goat", "car")
result.switch <- result.nosqitch <- rep(NA, sims)
for(i in 1:sims) {
## randomly choose the initial door
first <- sample(1:3, size=1)
result.noswitch[i] <- doors[first]
remain <- doors[-first] # remaining two door
## Monty chooses one door with a goat
monty <- sample((1:2)[remain == "goat"], size=1)
result.switch[i] <- remain[-monty]
}
mean(result.noswitch == "car")
sims <- 1000
doors <- c("goat", "goat", "car")
result.switch <- result.nosqitch <- rep(NA, sims)
for(i in 1:sims) {
## randomly choose the initial door
first <- sample(1:3, size=1)
result.noswitch[i] <- doors[first]
remain <- doors[-first] # remaining two door
## Monty chooses one door with a goat
monty <- sample((1:2)[remain == "goat"], size=1)
result.switch[i] <- remain[-monty]
}
mean(result.noswitch == "car")
sims <- 1000
doors <- c("goat", "goat", "car")
result.switch <- result.nosqitch <- rep(NA, sims)
for(i in 1:sims) {
## randomly choose the initial door
first <- sample(1:3, size=1)
result.noswitch[i] <- doors[first]
remain <- doors[-first] # remaining two door
## Monty chooses one door with a goat
monty <- sample((1:2)[remain == "goat"], size=1)
result.switch[i] <- remain[-monty]
}
mean(result.switch == "car")
sims <- 1000
doors <- c("goat", "goat", "car")
result.switch <- result.noswitch <- rep(NA, sims)
for(i in 1:sims) {
## randomly choose the initial door
first <- sample(1:3, size=1)
result.noswitch[i] <- doors[first]
remain <- doors[-first] # remaining two door
## Monty chooses one door with a goat
monty <- sample((1:2)[remain == "goat"], size=1)
result.switch[i] <- remain[-monty]
}
mean(result.noswitch == "car")
mean(result.switch == "car")
# vectors
# c command for combine or concatenate
v <- c(3, 1, 4, 1, 5, 9)
sum(v)
# choose with n = 3, k = 2
choose(3, 2)
# replicate to do many simulations
n <- 100
r <- replicate(10^4,sum(sample(n)==(1:n)))
sum(r>=1)/10^4
# simulation for coniditonal probability
# family problem, 1=girl, 2=boy
n <- 10^5
child1 <- sample(2,n,replace=TRUE)
child2 <- sample(2,n,replace=TRUE)
# A is the event both children are girls, B is event elder child is a girl
n.b <- sum(child1 == 1)
n.ab <- sum(child1==1 & child2==1)
n.ab/n.b
# A is event that both children are girls, B is event at least one of the children is a girl
n.b <- sum(child1==1 | child2==1)
n.ab <- sum(child1==1 & child2==1)
n.ab/n.b
# Monty hall simulation
n <- 10^5
cardoor <- sample(3,n, replace=TRUE)
sunm(cardoor==1)/n
sum(cardoor==1)/n
# P(X = 3) where X ~ Bin(5, 0.2)
dbinom(3,5,0.2)
# realizations of seven iid Binom(5, 0.2)
rbinom(7,5,0.2)
#5 independent DUnif(1, 2, ... 100) rvs
sample(100, 5, replace=TRUE)
x <= c(0, 1, 5, 10)
p <- c(0.25, 0.5, 0.1, 0.15)
sample(x, 100, prob=p, replace=TRUE)
x <- c(0, 1, 5, 10)
p <- c(0.25, 0.5, 0.1, 0.15)
sample(x, 100, prob=p, replace=TRUE)
